{"version":3,"sources":["WASM.ts","game/Game.ts","Extensions.ts","logo.svg","game/Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["rows","cols","win","calculate_move","Token","Player","a","wasm","wins","calculate_scores","TokenToColor","tok","none","red","yellow","Array","repeat","what","l","arr","Game","board","currentPlayer","heights","r","push","c","this","human","ai","col","Error","token","ct","i","player","PlayerToToken","PlayerToText","Board","props","game","state","enabled","scores","transpose","alert","playerName","play","setState","check_winner","won","togglePlayer","className","style","backgroundColor","src","logo","alt","map","onClick","then","cont","val","index","React","Component","TokenView","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","load","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e627569d.chunk.js","sourcesContent":["export let rows: number\nexport let cols: number\nexport let win: number\nexport let calculate_move: (board: any, moves: number) => number\nexport let calculate_scores: (board: any, moves: number) => number[]\n\nexport async function load() {\n    const wasm = await import('wasm')\n    rows = wasm.rows()\n    cols = wasm.cols()\n    win = wasm.wins()\n    calculate_move= wasm.calculate_move\n    calculate_scores = wasm.calculate_scores\n}\n","import {cols, rows, win} from \"../WASM\";\nimport '../Extensions'\n\nexport enum Token {\n    red, yellow, none\n}\n\nexport enum Player {\n    ai, human\n}\n\nexport function TokenToColor(tok: Token) {\n    switch (tok) {\n        case Token.none:\n            return '#fff'\n        case Token.red:\n            return '#ff5252'\n        case Token.yellow:\n            return '#ffea00'\n    }\n}\n\nexport function PlayerToToken(player: Player) {\n    switch (player) {\n        case Player.ai:\n            return Token.red\n        case Player.human:\n            return Token.yellow\n    }\n}\n\nexport function PlayerToText(player: Player) {\n    switch (player) {\n        case Player.ai:\n            return \"AI\"\n        case Player.human:\n            return \"Human\"\n    }\n}\n\nclass Game {\n\n    public board: Token[][]\n    public currentPlayer: Player\n\n    private heights: number[]\n\n    constructor() {\n        let board: Token[][] = []\n        for (let r = 0; r < rows; r++) {\n            board.push([])\n            for (let c = 0; c < cols; c++) {\n                board[r].push(Token.none)\n            }\n        }\n\n        this.board = board\n        this.currentPlayer = Player.human\n        this.heights = Array.repeat(0, cols)\n    }\n\n    public get token(): Token {\n        return PlayerToToken(this.currentPlayer)\n    }\n\n    public get playerName(): string {\n        return PlayerToText(this.currentPlayer)\n    }\n\n    public togglePlayer() {\n        if (this.currentPlayer === Player.human) {\n            this.currentPlayer = Player.ai\n        } else {\n            this.currentPlayer = Player.human\n        }\n    }\n\n    /**\n     * plays selected column with current player\n     * @param col column to choose\n     * @return returns if the current player won\n     */\n    public play(col: number): boolean {\n        if (col >= cols) {\n            throw new Error(\"invalid column number\")\n        } else if (this.heights[col] >= rows) {\n            return false;\n        }\n\n        // set token\n        this.board[rows - this.heights[col] - 1][col] = this.token\n\n        // add to colHeights\n        this.heights[col]++;\n\n        return true;\n    }\n\n    public check_winner(): boolean {\n        let tok = this.token\n\n        for (let r = 0; r < rows; r++) {\n            for (let c = 0; c < cols; c++) {\n                if ((r > rows - win && c > cols - win) || this.board[r][c] !== tok) {\n                    // no need to check through positions\n                    continue;\n                }\n                let ct = 1;\n\n                // check right\n                if (c <= cols - win) {\n                    for (let i = 1; i < win; i++) {\n                        if (this.board[r][c + i] !== tok) {\n                            break;\n                        }\n                        ct++;\n                    }\n\n\n                    if (ct === win) {\n                        return true;\n                    }\n                }\n\n                // check down\n                if (r <= rows - win) {\n                    ct = 1;\n                    for (let i = 1; i < win; i++) {\n                        if (this.board[r + i][c] !== tok) {\n                            break;\n                        }\n                        ct++;\n                    }\n\n                    if (ct === win) {\n                        return true;\n                    }\n                }\n\n                // check r-d diagonal\n                if (r <= rows - win && c <= cols - win) {\n                    ct = 1;\n                    for (let i = 1; i < win; i++) {\n                        if (this.board[r + i][c + i] !== tok) {\n                            break;\n                        }\n                        ct++;\n                    }\n\n                    if (ct === win) {\n                        return true;\n                    }\n                }\n\n                // check r-u diagonal\n                if (r >= win - 1 && c <= cols - win) {\n                    ct = 1;\n                    for (let i = 1; i < win; i++) {\n                        if (this.board[r - i][c + i] !== tok) {\n                            break;\n                        }\n                        ct++;\n                    }\n\n                    if (ct === win) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n}\n\nexport default Game\n","declare global {\n    interface ArrayConstructor {\n        repeat(what: any, l: number): any[];\n    }\n}\n\nArray.repeat = (what: any, l: number) => {\n    let arr = new Array(l)\n    while(l) arr[--l] = what\n    return arr\n}\n\nexport {}\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport Game, {Token, TokenToColor} from \"./Game\";\nimport {rows, cols, calculate_scores, calculate_move} from '../WASM'\nimport './Board.css'\nimport logo from '../logo.svg'\n\n\ninterface Props {\n}\n\ninterface State {\n    board: Token[][],\n    enabled: boolean,\n    scores: number[]\n}\n\nclass Board extends React.Component<Props, State> {\n\n    private game: Game;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.game = new Game()\n\n        this.state = {\n            board: this.game.board,\n            enabled: true,\n            scores: []\n        }\n    }\n\n    transpose(): Token[][] {\n        let transpose: Token[][] = []\n        for (let c = 0; c < cols; c++) {\n            transpose.push([])\n            for (let r = 0; r < rows; r++) {\n                transpose[c].push(this.state.board[r][c])\n            }\n        }\n        return transpose\n    }\n\n    won() {\n        alert(`${this.game.playerName} won!`)\n    }\n\n    async play(col: number): Promise<boolean> {\n        let inserted = this.game.play(col);\n        if (inserted) {\n            this.setState({board: this.game.board})\n            let won = this.game.check_winner();\n            if (won) {\n                this.won();\n                return false;\n            } else {\n                this.game.togglePlayer()\n                return true;\n            }\n        }\n        return false;\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Connect4 AI</h1>\n                <div className=\"Row\">\n                    <p>Current Player: </p>\n                    <div className=\"CurrentPlayer\" style={{backgroundColor: TokenToColor(this.game.token)}}/>\n                    {!this.state.enabled && <div>\n                        <p>AI Thinking</p>\n                        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    </div>}\n                </div>\n                <div className='Row'>\n                    <div className='Board'>\n                        {this.transpose().map((col, c) => (\n                            <div className='Column' onClick={() => {\n                                if (this.state.enabled) {\n                                    this.setState({enabled: false}, () => {\n                                        this.play(c).then((cont) => {\n                                            if (cont) {\n                                                let ai = calculate_move(this.game.board, 12);\n                                                this.play(ai).then((c) => {\n                                                    if (c) {\n                                                        this.setState({enabled: true})\n                                                    }\n                                                })\n                                            } else {\n                                                this.setState({enabled: true})\n                                            }\n                                        })\n                                    })\n                                }\n                            }}>\n                                {col.map((tok, r) => (<TokenView r={r} c={c} tok={tok}/>))}\n                            </div>\n                        ))}\n                    </div>\n                    <div className='Column'>\n                        {this.state.scores.map((val, index) => (\n                            <p>COL {index + 1}: {val}</p>\n                        ))}\n                    </div>\n                </div>\n            </div>)\n    }\n}\n\ninterface TokenProps {\n    tok: Token,\n    r: number,\n    c: number\n}\n\ninterface TokenState {\n}\n\nclass TokenView extends React.Component<TokenProps, TokenState> {\n\n    render() {\n        return <div key={`${this.props.r}, ${this.props.c}`}\n                    className='Token'\n                    style={{backgroundColor: TokenToColor(this.props.tok)}}/>\n    }\n\n}\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\nimport Board from './game/Board'\n\ninterface Props {\n}\n\ninterface State {\n}\n\nclass App extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <Board/>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {load} from './WASM'\n\nload().then(() => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n    reportWebVitals();\n})\n"],"sourceRoot":""}