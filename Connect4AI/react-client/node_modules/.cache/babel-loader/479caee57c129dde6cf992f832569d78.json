{"ast":null,"code":"import { COLS, ROWS } from \"./Constants\";\nexport let Token;\n\n(function (Token) {\n  Token[Token[\"red\"] = 0] = \"red\";\n  Token[Token[\"yellow\"] = 1] = \"yellow\";\n  Token[Token[\"none\"] = 2] = \"none\";\n})(Token || (Token = {}));\n\nexport let Player;\n\n(function (Player) {\n  Player[Player[\"human\"] = 0] = \"human\";\n  Player[Player[\"ai\"] = 1] = \"ai\";\n})(Player || (Player = {}));\n\nexport function TokenToColor(tok) {\n  switch (tok) {\n    case Token.none:\n      return '#fff';\n\n    case Token.red:\n      return '#ff5252';\n\n    case Token.yellow:\n      return '#ffea00';\n  }\n}\n_c = TokenToColor;\n\nclass Game {\n  constructor() {\n    this.board = void 0;\n    this.currentPlayer = void 0;\n    let board = [];\n\n    for (let r = 0; r < ROWS; r++) {\n      board.push([]);\n\n      for (let c = 0; c < COLS; c++) {\n        board[r].push(Token.none);\n      }\n    }\n\n    this.board = board;\n    this.currentPlayer = Player.human;\n  }\n\n  play(col) {\n    if (col >= COLS) {\n      throw new Error(\"invalid column number\");\n    }\n  }\n\n}\n\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenToColor\");","map":{"version":3,"sources":["/Users/pranavputta/WebstormProjects/Connect4AI/react-client/src/game/Game.ts"],"names":["COLS","ROWS","Token","Player","TokenToColor","tok","none","red","yellow","Game","constructor","board","currentPlayer","r","push","c","human","play","col","Error"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,IAAd,QAAyB,aAAzB;AAEA,WAAYC,KAAZ;;WAAYA,K;AAAAA,EAAAA,K,CAAAA,K;AAAAA,EAAAA,K,CAAAA,K;AAAAA,EAAAA,K,CAAAA,K;GAAAA,K,KAAAA,K;;AAIZ,WAAYC,MAAZ;;WAAYA,M;AAAAA,EAAAA,M,CAAAA,M;AAAAA,EAAAA,M,CAAAA,M;GAAAA,M,KAAAA,M;;AAIZ,OAAO,SAASC,YAAT,CAAsBC,GAAtB,EAAkC;AACrC,UAAQA,GAAR;AACI,SAAKH,KAAK,CAACI,IAAX;AACI,aAAO,MAAP;;AACJ,SAAKJ,KAAK,CAACK,GAAX;AACI,aAAO,SAAP;;AACJ,SAAKL,KAAK,CAACM,MAAX;AACI,aAAO,SAAP;AANR;AAQH;KATeJ,Y;;AAWhB,MAAMK,IAAN,CAAW;AAKPC,EAAAA,WAAW,GAAG;AAAA,SAHPC,KAGO;AAAA,SAFPC,aAEO;AACV,QAAID,KAAgB,GAAG,EAAvB;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,IAApB,EAA0BY,CAAC,EAA3B,EAA+B;AAC3BF,MAAAA,KAAK,CAACG,IAAN,CAAW,EAAX;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,IAApB,EAA0Be,CAAC,EAA3B,EAA+B;AAC3BJ,QAAAA,KAAK,CAACE,CAAD,CAAL,CAASC,IAAT,CAAcZ,KAAK,CAACI,IAApB;AACH;AACJ;;AAED,SAAKK,KAAL,GAAaA,KAAb;AACA,SAAKC,aAAL,GAAqBT,MAAM,CAACa,KAA5B;AACH;;AAEMC,EAAAA,IAAP,CAAYC,GAAZ,EAAyB;AACrB,QAAIA,GAAG,IAAIlB,IAAX,EAAiB;AACb,YAAM,IAAImB,KAAJ,CAAU,uBAAV,CAAN;AACH;AAEJ;;AAvBM;;AA2BX,eAAeV,IAAf","sourcesContent":["import {COLS, ROWS} from \"./Constants\";\n\nexport enum Token {\n    red, yellow, none\n}\n\nexport enum Player {\n    human, ai\n}\n\nexport function TokenToColor(tok: Token) {\n    switch (tok) {\n        case Token.none:\n            return '#fff'\n        case Token.red:\n            return '#ff5252'\n        case Token.yellow:\n            return '#ffea00'\n    }\n}\n\nclass Game {\n\n    public board: Token[][]\n    public currentPlayer: Player\n\n    constructor() {\n        let board: Token[][] = []\n        for (let r = 0; r < ROWS; r++) {\n            board.push([])\n            for (let c = 0; c < COLS; c++) {\n                board[r].push(Token.none)\n            }\n        }\n\n        this.board = board\n        this.currentPlayer = Player.human\n    }\n\n    public play(col: number) {\n        if (col >= COLS) {\n            throw new Error(\"invalid column number\")\n        }\n        \n    }\n\n}\n\nexport default Game\n"]},"metadata":{},"sourceType":"module"}