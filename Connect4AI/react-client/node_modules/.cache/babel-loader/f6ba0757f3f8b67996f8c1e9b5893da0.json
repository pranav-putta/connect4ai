{"ast":null,"code":"import * as wasm from './wasm_backend_bg.wasm';\nconst heap = new Array(32).fill(undefined);\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) {\n  return heap[idx];\n}\n\nlet WASM_VECTOR_LEN = 0;\nlet cachegetUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\nlet cachedTextEncoder = new lTextEncoder('utf-8');\nconst encodeString = typeof cachedTextEncoder.encodeInto === 'function' ? function (arg, view) {\n  return cachedTextEncoder.encodeInto(arg, view);\n} : function (arg, view) {\n  const buf = cachedTextEncoder.encode(arg);\n  view.set(buf);\n  return {\n    read: arg.length,\n    written: buf.length\n  };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n  if (realloc === undefined) {\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr = malloc(buf.length);\n    getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n    WASM_VECTOR_LEN = buf.length;\n    return ptr;\n  }\n\n  let len = arg.length;\n  let ptr = malloc(len);\n  const mem = getUint8Memory0();\n  let offset = 0;\n\n  for (; offset < len; offset++) {\n    const code = arg.charCodeAt(offset);\n    if (code > 0x7F) break;\n    mem[ptr + offset] = code;\n  }\n\n  if (offset !== len) {\n    if (offset !== 0) {\n      arg = arg.slice(offset);\n    }\n\n    ptr = realloc(ptr, len, len = offset + arg.length * 3);\n    const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n    const ret = encodeString(arg, view);\n    offset += ret.written;\n  }\n\n  WASM_VECTOR_LEN = offset;\n  return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n  if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n\n  return cachegetInt32Memory0;\n}\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n  if (idx < 36) return;\n  heap[idx] = heap_next;\n  heap_next = idx;\n}\n\nfunction takeObject(idx) {\n  const ret = getObject(idx);\n  dropObject(idx);\n  return ret;\n}\n/**\n* @returns {number}\n*/\n\n\nexport function rows() {\n  var ret = wasm.rows();\n  return ret >>> 0;\n}\n/**\n* @returns {number}\n*/\n\nexport function cols() {\n  var ret = wasm.cols();\n  return ret >>> 0;\n}\n/**\n* @returns {number}\n*/\n\nexport function wins() {\n  var ret = wasm.wins();\n  return ret >>> 0;\n}\n\nfunction addHeapObject(obj) {\n  if (heap_next === heap.length) heap.push(heap.length + 1);\n  const idx = heap_next;\n  heap_next = heap[idx];\n  heap[idx] = obj;\n  return idx;\n}\n/**\n* @param {any} board\n* @returns {number}\n*/\n\n\nexport function calculateMove(board) {\n  var ret = wasm.calculateMove(addHeapObject(board));\n  return ret >>> 0;\n}\nexport const __wbindgen_json_serialize = function (arg0, arg1) {\n  const obj = getObject(arg1);\n  var ret = JSON.stringify(obj === undefined ? null : obj);\n  var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\nexport const __wbindgen_object_drop_ref = function (arg0) {\n  takeObject(arg0);\n};","map":{"version":3,"sources":["/Users/pranavputta/WebstormProjects/Connect4AI/wasm-build/wasm_backend_bg.js"],"names":["wasm","heap","Array","fill","undefined","push","getObject","idx","WASM_VECTOR_LEN","cachegetUint8Memory0","getUint8Memory0","buffer","memory","Uint8Array","lTextEncoder","TextEncoder","module","require","cachedTextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","passStringToWasm0","malloc","realloc","ptr","subarray","len","mem","offset","code","charCodeAt","slice","ret","cachegetInt32Memory0","getInt32Memory0","Int32Array","heap_next","dropObject","takeObject","rows","cols","wins","addHeapObject","obj","calculateMove","board","__wbindgen_json_serialize","arg0","arg1","JSON","stringify","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","__wbindgen_object_drop_ref"],"mappings":"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","sourcesContent":["import * as wasm from './wasm_backend_bg.wasm';\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n* @returns {number}\n*/\nexport function rows() {\n    var ret = wasm.rows();\n    return ret >>> 0;\n}\n\n/**\n* @returns {number}\n*/\nexport function cols() {\n    var ret = wasm.cols();\n    return ret >>> 0;\n}\n\n/**\n* @returns {number}\n*/\nexport function wins() {\n    var ret = wasm.wins();\n    return ret >>> 0;\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n/**\n* @param {any} board\n* @returns {number}\n*/\nexport function calculateMove(board) {\n    var ret = wasm.calculateMove(addHeapObject(board));\n    return ret >>> 0;\n}\n\nexport const __wbindgen_json_serialize = function(arg0, arg1) {\n    const obj = getObject(arg1);\n    var ret = JSON.stringify(obj === undefined ? null : obj);\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\n"]},"metadata":{},"sourceType":"module"}