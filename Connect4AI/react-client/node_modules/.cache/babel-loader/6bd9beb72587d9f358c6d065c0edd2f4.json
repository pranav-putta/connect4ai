{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pranavputta/WebstormProjects/Connect4AI/react-client/src/game/Board.tsx\";\nimport React from \"react\";\nimport Game, { TokenToColor } from \"./Game\";\nimport { rows, cols, calculate_move } from '../WASM';\nimport './Board.css';\nimport logo from \"../logo.svg\";\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.game = void 0;\n    this.game = new Game();\n    this.state = {\n      board: this.game.board,\n      enabled: true\n    };\n  }\n\n  transpose() {\n    let transpose = [];\n\n    for (let c = 0; c < cols; c++) {\n      transpose.push([]);\n\n      for (let r = 0; r < rows; r++) {\n        transpose[c].push(this.state.board[r][c]);\n      }\n    }\n\n    return transpose;\n  }\n\n  won() {\n    alert(`${this.game.playerName} won!`);\n  }\n\n  play(col) {\n    let inserted = this.game.play(col);\n\n    if (inserted) {\n      this.setState({\n        board: this.game.board\n      });\n      let won = this.game.check_winner();\n\n      if (won) {\n        this.won();\n        return false;\n      } else {\n        this.game.togglePlayer();\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Connect4 AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Row\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Current Player: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"CurrentPlayer\",\n          style: {\n            backgroundColor: TokenToColor(this.game.token)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Row\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"AI Thinking\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: logo,\n            className: \"App-logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Board\",\n        children: this.transpose().map((col, c) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Column\",\n          onClick: () => {\n            if (this.state.enabled) {\n              this.setState({\n                enabled: false\n              }, () => {\n                let cont = this.play(c);\n\n                if (cont) {\n                  let ai = calculate_move(this.game.board, 8);\n\n                  if (this.play(ai)) {\n                    this.setState({\n                      enabled: true\n                    });\n                  }\n                }\n              });\n            }\n          },\n          children: col.map((tok, r) => /*#__PURE__*/_jsxDEV(TokenView, {\n            r: r,\n            c: c,\n            tok: tok\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 51\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass TokenView extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Token\",\n      style: {\n        backgroundColor: TokenToColor(this.props.tok)\n      }\n    }, `${this.props.r}, ${this.props.c}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/pranavputta/WebstormProjects/Connect4AI/react-client/src/game/Board.tsx"],"names":["React","Game","TokenToColor","rows","cols","calculate_move","Board","Component","constructor","props","game","state","board","enabled","transpose","c","push","r","won","alert","playerName","play","col","inserted","setState","check_winner","togglePlayer","render","backgroundColor","token","logo","map","cont","ai","tok","TokenView"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Game, {Token, TokenToColor} from \"./Game\";\nimport {rows, cols, calculate_move} from '../WASM'\nimport './Board.css'\nimport logo from '../logo.svg'\n\n\ninterface Props {\n}\n\ninterface State {\n    board: Token[][],\n    enabled: boolean\n}\n\nclass Board extends React.Component<Props, State> {\n\n    private game: Game;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.game = new Game()\n\n        this.state = {\n            board: this.game.board,\n            enabled: true\n        }\n    }\n\n    transpose(): Token[][] {\n        let transpose: Token[][] = []\n        for (let c = 0; c < cols; c++) {\n            transpose.push([])\n            for (let r = 0; r < rows; r++) {\n                transpose[c].push(this.state.board[r][c])\n            }\n        }\n        return transpose\n    }\n\n    won() {\n        alert(`${this.game.playerName} won!`)\n    }\n\n    play(col: number): boolean {\n        let inserted = this.game.play(col);\n        if (inserted) {\n            this.setState({board: this.game.board})\n            let won = this.game.check_winner();\n            if (won) {\n                this.won();\n                return false;\n            } else {\n                this.game.togglePlayer()\n                return true;\n            }\n        }\n        return false;\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Connect4 AI</h1>\n                <div className=\"Row\">\n                    <p>Current Player: </p>\n                    <div className=\"CurrentPlayer\" style={{backgroundColor: TokenToColor(this.game.token)}}/>\n                    <div className=\"Row\">\n                        <p>AI Thinking</p>\n                        <img src={logo} className=\"App-logo\"/>\n                    </div>\n                </div>\n                <div className='Board'>\n                    {this.transpose().map((col, c) => (\n                        <div className='Column' onClick={() => {\n                            if (this.state.enabled) {\n                                this.setState({enabled: false}, () => {\n                                    let cont = this.play(c)\n                                    if (cont) {\n                                        let ai = calculate_move(this.game.board, 8)\n                                        if (this.play(ai)) {\n                                            this.setState({enabled: true})\n                                        }\n                                    }\n                                })\n                            }\n                        }}>\n                            {col.map((tok, r) => (<TokenView r={r} c={c} tok={tok}/>))}\n                        </div>\n                    ))}\n                </div>\n            </div>)\n    }\n}\n\ninterface TokenProps {\n    tok: Token,\n    r: number,\n    c: number\n}\n\ninterface TokenState {\n}\n\nclass TokenView extends React.Component<TokenProps, TokenState> {\n\n    render() {\n        return <div key={`${this.props.r}, ${this.props.c}`}\n                    className='Token'\n                    style={{backgroundColor: TokenToColor(this.props.tok)}}/>\n    }\n\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}