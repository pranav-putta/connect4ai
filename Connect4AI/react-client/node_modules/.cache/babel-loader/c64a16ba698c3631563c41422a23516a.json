{"ast":null,"code":"import { COLS, ROWS, WIN } from \"./Constants\";\nimport '../Extensions';\nexport let Token;\n\n(function (Token) {\n  Token[Token[\"red\"] = 0] = \"red\";\n  Token[Token[\"yellow\"] = 1] = \"yellow\";\n  Token[Token[\"none\"] = 2] = \"none\";\n})(Token || (Token = {}));\n\nexport let Player;\n\n(function (Player) {\n  Player[Player[\"human\"] = 0] = \"human\";\n  Player[Player[\"ai\"] = 1] = \"ai\";\n})(Player || (Player = {}));\n\nexport function TokenToColor(tok) {\n  switch (tok) {\n    case Token.none:\n      return '#fff';\n\n    case Token.red:\n      return '#ff5252';\n\n    case Token.yellow:\n      return '#ffea00';\n  }\n}\n_c = TokenToColor;\nexport function PlayerToToken(player) {\n  switch (player) {\n    case Player.ai:\n      return Token.red;\n\n    case Player.human:\n      return Token.yellow;\n  }\n}\n_c2 = PlayerToToken;\nexport function PlayerToText(player) {\n  switch (player) {\n    case Player.ai:\n      return \"AI\";\n\n    case Player.human:\n      return \"Human\";\n  }\n}\n_c3 = PlayerToText;\n\nclass Game {\n  constructor() {\n    this.board = void 0;\n    this.currentPlayer = void 0;\n    this.heights = void 0;\n    let board = [];\n\n    for (let r = 0; r < ROWS; r++) {\n      board.push([]);\n\n      for (let c = 0; c < COLS; c++) {\n        board[r].push(Token.none);\n      }\n    }\n\n    this.board = board;\n    this.currentPlayer = Player.human;\n    this.heights = Array.repeat(0, COLS);\n  }\n\n  get token() {\n    return PlayerToToken(this.currentPlayer);\n  }\n\n  get playerName() {\n    return PlayerToText(this.currentPlayer);\n  }\n\n  togglePlayer() {\n    if (this.currentPlayer === Player.human) {\n      this.currentPlayer = Player.ai;\n    } else {\n      this.currentPlayer = Player.human;\n    }\n  }\n  /**\n   * plays selected column with current player\n   * @param col column to choose\n   * @return returns if the current player won\n   */\n\n\n  play(col) {\n    if (col >= COLS) {\n      throw new Error(\"invalid column number\");\n    } else if (this.heights[col] >= COLS - 1) {\n      return false;\n    } // set token\n\n\n    this.board[ROWS - this.heights[col] - 1][col] = this.token; // add to colHeights\n\n    this.heights[col]++;\n    let won = this.checkWinner(); // switch player\n\n    if (!won) this.togglePlayer();\n    return won;\n  }\n\n  checkWinner() {\n    let tok = this.token;\n\n    for (let r = 0; r < ROWS; r++) {\n      for (let c = 0; c < COLS; c++) {\n        if (r > ROWS - WIN && c > COLS - WIN || this.board[r][c] !== tok) {\n          // no need to check through positions\n          continue;\n        }\n\n        let ct = 1; // check right\n\n        if (c <= COLS - WIN) {\n          for (let i = 1; i < WIN; i++) {\n            if (this.board[r][c + i] !== tok) {\n              break;\n            }\n\n            ct++;\n          }\n\n          if (ct === WIN) {\n            return true;\n          }\n        } // check down\n\n\n        if (r <= ROWS - WIN) {\n          ct = 1;\n\n          for (let i = 1; i < WIN; i++) {\n            if (this.board[r + i][c] !== tok) {\n              break;\n            }\n\n            ct++;\n          }\n\n          if (ct === WIN) {\n            return true;\n          }\n        } // check r-d diagonal\n\n\n        if (r <= ROWS - WIN && c <= COLS - WIN) {\n          ct = 1;\n\n          for (let i = 1; i < WIN; i++) {\n            if (this.board[r + i][c + i] !== tok) {\n              break;\n            }\n\n            ct++;\n          }\n\n          if (ct === WIN) {\n            return true;\n          }\n        } // check r-u diagonal\n\n\n        if (r >= WIN - 1 && c <= COLS - WIN) {\n          ct = 1;\n\n          for (let i = 1; i < WIN; i++) {\n            if (this.board[r - i][c + i] !== tok) {\n              break;\n            }\n\n            ct++;\n          }\n\n          if (ct === WIN) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n}\n\nexport default Game;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TokenToColor\");\n$RefreshReg$(_c2, \"PlayerToToken\");\n$RefreshReg$(_c3, \"PlayerToText\");","map":{"version":3,"sources":["/Users/pranavputta/WebstormProjects/Connect4AI/react-client/src/game/Game.ts"],"names":["COLS","ROWS","WIN","Token","Player","TokenToColor","tok","none","red","yellow","PlayerToToken","player","ai","human","PlayerToText","Game","constructor","board","currentPlayer","heights","r","push","c","Array","repeat","token","playerName","togglePlayer","play","col","Error","won","checkWinner","ct","i"],"mappings":"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","sourcesContent":["import {COLS, ROWS, WIN} from \"./Constants\";\nimport '../Extensions'\n\nexport enum Token {\n    red, yellow, none\n}\n\nexport enum Player {\n    human, ai\n}\n\nexport function TokenToColor(tok: Token) {\n    switch (tok) {\n        case Token.none:\n            return '#fff'\n        case Token.red:\n            return '#ff5252'\n        case Token.yellow:\n            return '#ffea00'\n    }\n}\n\nexport function PlayerToToken(player: Player) {\n    switch (player) {\n        case Player.ai:\n            return Token.red\n        case Player.human:\n            return Token.yellow\n    }\n}\n\nexport function PlayerToText(player: Player) {\n    switch (player) {\n        case Player.ai:\n            return \"AI\"\n        case Player.human:\n            return \"Human\"\n    }\n}\n\nclass Game {\n\n    public board: Token[][]\n    public currentPlayer: Player\n\n    private heights: number[]\n\n    constructor() {\n        let board: Token[][] = []\n        for (let r = 0; r < ROWS; r++) {\n            board.push([])\n            for (let c = 0; c < COLS; c++) {\n                board[r].push(Token.none)\n            }\n        }\n\n        this.board = board\n        this.currentPlayer = Player.human\n        this.heights = Array.repeat(0, COLS)\n    }\n\n    public get token(): Token {\n        return PlayerToToken(this.currentPlayer)\n    }\n\n    public get playerName(): string {\n        return PlayerToText(this.currentPlayer)\n    }\n\n    private togglePlayer() {\n        if (this.currentPlayer === Player.human) {\n            this.currentPlayer = Player.ai\n        } else {\n            this.currentPlayer = Player.human\n        }\n    }\n\n    /**\n     * plays selected column with current player\n     * @param col column to choose\n     * @return returns if the current player won\n     */\n    public play(col: number): boolean {\n        if (col >= COLS) {\n            throw new Error(\"invalid column number\")\n        } else if (this.heights[col] >= COLS - 1) {\n            return false;\n        }\n\n        // set token\n        this.board[ROWS - this.heights[col] - 1][col] = this.token\n\n        // add to colHeights\n        this.heights[col]++;\n\n        let won = this.checkWinner()\n\n        // switch player\n        if (!won) this.togglePlayer()\n\n        return won;\n    }\n\n    public checkWinner(): boolean {\n        let tok = this.token\n\n        for (let r = 0; r < ROWS; r++) {\n            for (let c = 0; c < COLS; c++) {\n                if ((r > ROWS - WIN && c > COLS - WIN) || this.board[r][c] !== tok) {\n                    // no need to check through positions\n                    continue;\n                }\n                let ct = 1;\n\n                // check right\n                if (c <= COLS - WIN) {\n                    for (let i = 1; i < WIN; i++) {\n                        if (this.board[r][c + i] !== tok) {\n                            break;\n                        }\n                        ct++;\n                    }\n\n\n                    if (ct === WIN) {\n                        return true;\n                    }\n                }\n\n                // check down\n                if (r <= ROWS - WIN) {\n                    ct = 1;\n                    for (let i = 1; i < WIN; i++) {\n                        if (this.board[r + i][c] !== tok) {\n                            break;\n                        }\n                        ct++;\n                    }\n\n                    if (ct === WIN) {\n                        return true;\n                    }\n                }\n\n                // check r-d diagonal\n                if (r <= ROWS - WIN && c <= COLS - WIN) {\n                    ct = 1;\n                    for (let i = 1; i < WIN; i++) {\n                        if (this.board[r + i][c + i] !== tok) {\n                            break;\n                        }\n                        ct++;\n                    }\n\n                    if (ct === WIN) {\n                        return true;\n                    }\n                }\n\n                // check r-u diagonal\n                if (r >= WIN - 1 && c <= COLS - WIN) {\n                    ct = 1;\n                    for (let i = 1; i < WIN; i++) {\n                        if (this.board[r - i][c + i] !== tok) {\n                            break;\n                        }\n                        ct++;\n                    }\n\n                    if (ct === WIN) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n}\n\nexport default Game\n"]},"metadata":{},"sourceType":"module"}