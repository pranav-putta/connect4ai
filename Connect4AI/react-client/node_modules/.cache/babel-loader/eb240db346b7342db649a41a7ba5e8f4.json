{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pranavputta/WebstormProjects/Connect4AI/react-client/src/game/Board.tsx\";\nimport React from \"react\";\nimport Game, { TokenToColor } from \"./Game\";\nimport { rows, cols, calculate_scores } from '../WASM';\nimport './Board.css';\nimport logo from \"../logo.svg\";\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.game = void 0;\n    this.game = new Game();\n    this.state = {\n      board: this.game.board,\n      enabled: true,\n      scores: []\n    };\n  }\n\n  transpose() {\n    let transpose = [];\n\n    for (let c = 0; c < cols; c++) {\n      transpose.push([]);\n\n      for (let r = 0; r < rows; r++) {\n        transpose[c].push(this.state.board[r][c]);\n      }\n    }\n\n    return transpose;\n  }\n\n  won() {\n    alert(`${this.game.playerName} won!`);\n  }\n\n  async play(col) {\n    let inserted = this.game.play(col);\n\n    if (inserted) {\n      this.setState({\n        board: this.game.board\n      });\n      let won = this.game.check_winner();\n\n      if (won) {\n        this.won();\n        return false;\n      } else {\n        this.game.togglePlayer();\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Connect4 AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Row\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Current Player: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"CurrentPlayer\",\n          style: {\n            backgroundColor: TokenToColor(this.game.token)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), !this.state.enabled && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"AI Thinking\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: logo,\n            className: \"App-logo\",\n            alt: \"logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 45\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Board\",\n          children: this.transpose().map((col, c) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Column\",\n            onClick: () => {\n              if (this.state.enabled) {\n                this.setState({\n                  enabled: false\n                }, () => {\n                  this.play(c).then(cont => {\n                    if (cont) {\n                      let scores = calculate_scores(this.game.board, 12);\n                      let ai = 0;\n                      let best = scores[3];\n                      let colOrder = [3, 4, 2, 5, 0, 6];\n\n                      for (let i = 0; i < scores.length; i++) {\n                        let col = colOrder[i];\n\n                        if (scores[col] > best) {\n                          ai = col;\n                          best = scores[col];\n                        }\n                      }\n\n                      this.setState({\n                        scores: scores\n                      });\n                      this.play(ai).then(c => {\n                        if (c) {\n                          this.setState({\n                            enabled: true\n                          });\n                        }\n                      });\n                    } else {\n                      this.setState({\n                        enabled: true\n                      });\n                    }\n                  });\n                });\n              }\n            },\n            children: col.map((tok, r) => /*#__PURE__*/_jsxDEV(TokenView, {\n              r: r,\n              c: c,\n              tok: tok\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 55\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Column\",\n          children: this.state.scores.map((val, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"COL \", index + 1, \": \", val]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass TokenView extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Token\",\n      style: {\n        backgroundColor: TokenToColor(this.props.tok)\n      }\n    }, `${this.props.r}, ${this.props.c}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/pranavputta/WebstormProjects/Connect4AI/react-client/src/game/Board.tsx"],"names":["React","Game","TokenToColor","rows","cols","calculate_scores","Board","Component","constructor","props","game","state","board","enabled","scores","transpose","c","push","r","won","alert","playerName","play","col","inserted","setState","check_winner","togglePlayer","render","backgroundColor","token","logo","map","then","cont","ai","best","colOrder","i","length","tok","val","index","TokenView"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Game, {Token, TokenToColor} from \"./Game\";\nimport {rows, cols, calculate_scores} from '../WASM'\nimport './Board.css'\nimport logo from '../logo.svg'\n\n\ninterface Props {\n}\n\ninterface State {\n    board: Token[][],\n    enabled: boolean,\n    scores: number[]\n}\n\nclass Board extends React.Component<Props, State> {\n\n    private game: Game;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.game = new Game()\n\n        this.state = {\n            board: this.game.board,\n            enabled: true,\n            scores: []\n        }\n    }\n\n    transpose(): Token[][] {\n        let transpose: Token[][] = []\n        for (let c = 0; c < cols; c++) {\n            transpose.push([])\n            for (let r = 0; r < rows; r++) {\n                transpose[c].push(this.state.board[r][c])\n            }\n        }\n        return transpose\n    }\n\n    won() {\n        alert(`${this.game.playerName} won!`)\n    }\n\n    async play(col: number): Promise<boolean> {\n        let inserted = this.game.play(col);\n        if (inserted) {\n            this.setState({board: this.game.board})\n            let won = this.game.check_winner();\n            if (won) {\n                this.won();\n                return false;\n            } else {\n                this.game.togglePlayer()\n                return true;\n            }\n        }\n        return false;\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Connect4 AI</h1>\n                <div className=\"Row\">\n                    <p>Current Player: </p>\n                    <div className=\"CurrentPlayer\" style={{backgroundColor: TokenToColor(this.game.token)}}/>\n                    {!this.state.enabled && <div>\n                        <p>AI Thinking</p>\n                        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    </div>}\n                </div>\n                <div className='Row'>\n                    <div className='Board'>\n                        {this.transpose().map((col, c) => (\n                            <div className='Column' onClick={() => {\n                                if (this.state.enabled) {\n                                    this.setState({enabled: false}, () => {\n                                        this.play(c).then((cont) => {\n                                            if (cont) {\n                                                let scores = calculate_scores(this.game.board, 12)\n                                                let ai = 0\n                                                let best = scores[3]\n                                                let colOrder = [3, 4, 2, 5, 0, 6];\n                                                for (let i = 0; i < scores.length; i++) {\n                                                    let col = colOrder[i];\n                                                    if (scores[col] > best) {\n                                                        ai = col;\n                                                        best = scores[col];\n                                                    }\n                                                }\n                                                this.setState({scores: scores});\n                                                this.play(ai).then((c) => {\n                                                    if (c) {\n                                                        this.setState({enabled: true})\n                                                    }\n                                                })\n                                            } else {\n                                                this.setState({enabled: true})\n                                            }\n                                        })\n                                    })\n                                }\n                            }}>\n                                {col.map((tok, r) => (<TokenView r={r} c={c} tok={tok}/>))}\n                            </div>\n                        ))}\n                    </div>\n                    <div className='Column'>\n                        {this.state.scores.map((val, index) => (\n                            <p>COL {index + 1}: {val}</p>\n                        ))}\n                    </div>\n                </div>\n            </div>)\n    }\n}\n\ninterface TokenProps {\n    tok: Token,\n    r: number,\n    c: number\n}\n\ninterface TokenState {\n}\n\nclass TokenView extends React.Component<TokenProps, TokenState> {\n\n    render() {\n        return <div key={`${this.props.r}, ${this.props.c}`}\n                    className='Token'\n                    style={{backgroundColor: TokenToColor(this.props.tok)}}/>\n    }\n\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}