{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pranavputta/WebstormProjects/Connect4AI/react-client/src/game/Board.tsx\";\nimport React from \"react\";\nimport Game, { TokenToColor } from \"./Game\";\nimport { rows, cols, calculate } from '../WASM';\nimport './Board.css';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.game = void 0;\n    this.game = new Game();\n    this.state = {\n      board: this.game.board\n    };\n  }\n\n  transpose() {\n    let transpose = [];\n\n    for (let c = 0; c < cols; c++) {\n      transpose.push([]);\n\n      for (let r = 0; r < rows; r++) {\n        transpose[c].push(this.state.board[r][c]);\n      }\n    }\n\n    return transpose;\n  }\n\n  won() {\n    alert(`${this.game.playerName} won!`);\n  }\n\n  render() {\n    calculate(this.game.board);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Connect4 AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Row\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Current Player: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"CurrentPlayer\",\n          style: {\n            backgroundColor: TokenToColor(this.game.token)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Board\",\n        children: this.transpose().map((col, c) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Column\",\n          onClick: () => {\n            let won = this.game.play(c);\n            this.setState({\n              board: this.game.board\n            });\n\n            if (won) {\n              this.won();\n            }\n          },\n          children: col.map((tok, r) => /*#__PURE__*/_jsxDEV(TokenView, {\n            r: r,\n            c: c,\n            tok: tok\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 51\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass TokenView extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Token\",\n      style: {\n        backgroundColor: TokenToColor(this.props.tok)\n      }\n    }, `${this.props.r}, ${this.props.c}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/pranavputta/WebstormProjects/Connect4AI/react-client/src/game/Board.tsx"],"names":["React","Game","TokenToColor","rows","cols","calculate","Board","Component","constructor","props","game","state","board","transpose","c","push","r","won","alert","playerName","render","backgroundColor","token","map","col","play","setState","tok","TokenView"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Game, {Token, TokenToColor} from \"./Game\";\nimport {rows, cols, calculate} from '../WASM'\nimport './Board.css'\n\n\ninterface Props {\n}\n\ninterface State {\n    board: Token[][]\n}\n\nclass Board extends React.Component<Props, State> {\n\n    private game: Game;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.game = new Game()\n\n        this.state = {\n            board: this.game.board\n        }\n    }\n\n    transpose(): Token[][] {\n        let transpose: Token[][] = []\n        for (let c = 0; c < cols; c++) {\n            transpose.push([])\n            for (let r = 0; r < rows; r++) {\n                transpose[c].push(this.state.board[r][c])\n            }\n        }\n        return transpose\n    }\n\n    won() {\n        alert(`${this.game.playerName} won!`)\n    }\n\n    render() {\n        calculate(this.game.board)\n        return (\n            <div>\n                <h1>Connect4 AI</h1>\n                <div className=\"Row\">\n                    <p>Current Player: </p>\n                    <div className=\"CurrentPlayer\" style={{backgroundColor: TokenToColor(this.game.token)}}/>\n                </div>\n                <div className='Board'>\n                    {this.transpose().map((col, c) => (\n                        <div className='Column' onClick={() => {\n                            let won = this.game.play(c)\n                            this.setState({board: this.game.board})\n                            if (won) {\n                                this.won()\n                            }\n                        }}>\n                            {col.map((tok, r) => (<TokenView r={r} c={c} tok={tok}/>))}\n                        </div>\n                    ))}\n                </div>\n            </div>)\n    }\n}\n\ninterface TokenProps {\n    tok: Token,\n    r: number,\n    c: number\n}\n\ninterface TokenState {\n}\n\nclass TokenView extends React.Component<TokenProps, TokenState> {\n\n    render() {\n        return <div key={`${this.props.r}, ${this.props.c}`}\n                    className='Token'\n                    style={{backgroundColor: TokenToColor(this.props.tok)}}/>\n    }\n\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}