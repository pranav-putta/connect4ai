{"ast":null,"code":"import { COLS, ROWS } from \"./Constants\";\nimport '../Extensions';\nexport let Token;\n\n(function (Token) {\n  Token[Token[\"red\"] = 0] = \"red\";\n  Token[Token[\"yellow\"] = 1] = \"yellow\";\n  Token[Token[\"none\"] = 2] = \"none\";\n})(Token || (Token = {}));\n\nexport let Player;\n\n(function (Player) {\n  Player[Player[\"human\"] = 0] = \"human\";\n  Player[Player[\"ai\"] = 1] = \"ai\";\n})(Player || (Player = {}));\n\nexport function TokenToColor(tok) {\n  switch (tok) {\n    case Token.none:\n      return '#fff';\n\n    case Token.red:\n      return '#ff5252';\n\n    case Token.yellow:\n      return '#ffea00';\n  }\n}\n_c = TokenToColor;\nexport function PlayerToToken(player) {\n  switch (player) {\n    case Player.ai:\n      return Token.red;\n\n    case Player.human:\n      return Token.yellow;\n  }\n}\n_c2 = PlayerToToken;\n\nclass Game {\n  constructor() {\n    this.board = void 0;\n    this.currentPlayer = void 0;\n    this.colHeights = void 0;\n    let board = [];\n\n    for (let r = 0; r < ROWS; r++) {\n      board.push([]);\n\n      for (let c = 0; c < COLS; c++) {\n        board[r].push(Token.none);\n      }\n    }\n\n    this.board = board;\n    this.currentPlayer = Player.human;\n    this.colHeights = Array.repeat(0, COLS);\n  }\n\n  togglePlayer() {}\n\n  play(col) {\n    if (col >= COLS) {\n      throw new Error(\"invalid column number\");\n    } else if (this.colHeights[col] >= COLS) {\n      return false;\n    } // set token\n\n\n    this.board[ROWS - this.colHeights[col] - 1][col] = PlayerToToken(this.currentPlayer); // add to colHeights\n\n    this.colHeights[col]++; // switch player\n\n    return true;\n  }\n\n}\n\nexport default Game;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TokenToColor\");\n$RefreshReg$(_c2, \"PlayerToToken\");","map":{"version":3,"sources":["/Users/pranavputta/WebstormProjects/Connect4AI/react-client/src/game/Game.ts"],"names":["COLS","ROWS","Token","Player","TokenToColor","tok","none","red","yellow","PlayerToToken","player","ai","human","Game","constructor","board","currentPlayer","colHeights","r","push","c","Array","repeat","togglePlayer","play","col","Error"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,IAAd,QAAyB,aAAzB;AACA,OAAO,eAAP;AAEA,WAAYC,KAAZ;;WAAYA,K;AAAAA,EAAAA,K,CAAAA,K;AAAAA,EAAAA,K,CAAAA,K;AAAAA,EAAAA,K,CAAAA,K;GAAAA,K,KAAAA,K;;AAIZ,WAAYC,MAAZ;;WAAYA,M;AAAAA,EAAAA,M,CAAAA,M;AAAAA,EAAAA,M,CAAAA,M;GAAAA,M,KAAAA,M;;AAIZ,OAAO,SAASC,YAAT,CAAsBC,GAAtB,EAAkC;AACrC,UAAQA,GAAR;AACI,SAAKH,KAAK,CAACI,IAAX;AACI,aAAO,MAAP;;AACJ,SAAKJ,KAAK,CAACK,GAAX;AACI,aAAO,SAAP;;AACJ,SAAKL,KAAK,CAACM,MAAX;AACI,aAAO,SAAP;AANR;AAQH;KATeJ,Y;AAWhB,OAAO,SAASK,aAAT,CAAuBC,MAAvB,EAAuC;AAC1C,UAAQA,MAAR;AACI,SAAKP,MAAM,CAACQ,EAAZ;AACI,aAAOT,KAAK,CAACK,GAAb;;AACJ,SAAKJ,MAAM,CAACS,KAAZ;AACI,aAAOV,KAAK,CAACM,MAAb;AAJR;AAMH;MAPeC,a;;AAShB,MAAMI,IAAN,CAAW;AAOPC,EAAAA,WAAW,GAAG;AAAA,SALPC,KAKO;AAAA,SAJPC,aAIO;AAAA,SAFNC,UAEM;AACV,QAAIF,KAAgB,GAAG,EAAvB;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,IAApB,EAA0BiB,CAAC,EAA3B,EAA+B;AAC3BH,MAAAA,KAAK,CAACI,IAAN,CAAW,EAAX;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,IAApB,EAA0BoB,CAAC,EAA3B,EAA+B;AAC3BL,QAAAA,KAAK,CAACG,CAAD,CAAL,CAASC,IAAT,CAAcjB,KAAK,CAACI,IAApB;AACH;AACJ;;AAED,SAAKS,KAAL,GAAaA,KAAb;AACA,SAAKC,aAAL,GAAqBb,MAAM,CAACS,KAA5B;AACA,SAAKK,UAAL,GAAkBI,KAAK,CAACC,MAAN,CAAa,CAAb,EAAgBtB,IAAhB,CAAlB;AACH;;AAEOuB,EAAAA,YAAR,GAAuB,CAEtB;;AAEMC,EAAAA,IAAP,CAAYC,GAAZ,EAAkC;AAC9B,QAAIA,GAAG,IAAIzB,IAAX,EAAiB;AACb,YAAM,IAAI0B,KAAJ,CAAU,uBAAV,CAAN;AACH,KAFD,MAEO,IAAI,KAAKT,UAAL,CAAgBQ,GAAhB,KAAwBzB,IAA5B,EAAkC;AACrC,aAAO,KAAP;AACH,KAL6B,CAO9B;;;AACA,SAAKe,KAAL,CAAWd,IAAI,GAAG,KAAKgB,UAAL,CAAgBQ,GAAhB,CAAP,GAA8B,CAAzC,EAA4CA,GAA5C,IAAmDhB,aAAa,CAAC,KAAKO,aAAN,CAAhE,CAR8B,CAU9B;;AACA,SAAKC,UAAL,CAAgBQ,GAAhB,IAX8B,CAa9B;;AAEA,WAAO,IAAP;AACH;;AAzCM;;AA6CX,eAAeZ,IAAf","sourcesContent":["import {COLS, ROWS} from \"./Constants\";\nimport '../Extensions'\n\nexport enum Token {\n    red, yellow, none\n}\n\nexport enum Player {\n    human, ai\n}\n\nexport function TokenToColor(tok: Token) {\n    switch (tok) {\n        case Token.none:\n            return '#fff'\n        case Token.red:\n            return '#ff5252'\n        case Token.yellow:\n            return '#ffea00'\n    }\n}\n\nexport function PlayerToToken(player: Player) {\n    switch (player) {\n        case Player.ai:\n            return Token.red\n        case Player.human:\n            return Token.yellow\n    }\n}\n\nclass Game {\n\n    public board: Token[][]\n    public currentPlayer: Player\n\n    private colHeights: number[]\n\n    constructor() {\n        let board: Token[][] = []\n        for (let r = 0; r < ROWS; r++) {\n            board.push([])\n            for (let c = 0; c < COLS; c++) {\n                board[r].push(Token.none)\n            }\n        }\n\n        this.board = board\n        this.currentPlayer = Player.human\n        this.colHeights = Array.repeat(0, COLS)\n    }\n\n    private togglePlayer() {\n        \n    }\n\n    public play(col: number): boolean {\n        if (col >= COLS) {\n            throw new Error(\"invalid column number\")\n        } else if (this.colHeights[col] >= COLS) {\n            return false;\n        }\n\n        // set token\n        this.board[ROWS - this.colHeights[col] - 1][col] = PlayerToToken(this.currentPlayer)\n\n        // add to colHeights\n        this.colHeights[col]++;\n\n        // switch player\n\n        return true;\n    }\n\n}\n\nexport default Game\n"]},"metadata":{},"sourceType":"module"}